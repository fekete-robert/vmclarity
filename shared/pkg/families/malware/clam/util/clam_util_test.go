package util

// Copyright Â© 2022 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import (
	"reflect"
	"testing"

	"github.com/openclarity/vmclarity/shared/pkg/families/malware/common"
)

func Test_ParseMalwareScanOutput(t *testing.T) {
	clamOutput := `
		/path/to/file.txt: OK
		/path/to/malware.exe: Win.Trojan.Generic-1 TROJAN FOUND
		/path/to/another/file.pdf: OK
		
		----------- SCAN SUMMARY -----------
		Known viruses: 123456
		Engine version: 0.103.4
		Scanned directories: 3
		Scanned files: 10
		Infected files: 1
		Data scanned: 1.00 MB
		Data read: 0.50 MB (ratio 2.00:1)
		Time: 0.020 sec (0 m 0 s)
	`

	expectedMalwareList := []common.DetectedMalware{
		{
			MalwareName: "Generic-1",
			MalwareType: "TROJAN",
			Path:        "/path/to/malware.exe",
		},
	}

	malwareList, summary := ParseMalwareScanOutput(clamOutput)

	expectedScannedFiles := 10
	if summary.ScannedFiles != expectedScannedFiles {
		t.Fatalf("Expected %v malwares, but got %v", expectedScannedFiles, summary.ScannedFiles)
	}

	if len(malwareList) != len(expectedMalwareList) {
		t.Fatalf("Expected %d malwares, but got %d", len(expectedMalwareList), len(malwareList))
	}

	for i, expectedMalware := range expectedMalwareList {
		malware := (malwareList)[i]
		if !reflect.DeepEqual(malware, expectedMalware) {
			t.Errorf("Malware %d: expected %v, but got %v", i, expectedMalware, malware)
		}
	}
}

func Test_ExtractMalwareInfo(t *testing.T) {
	words := []string{"/path/to/malware.exe:", "Win.Trojan.Generic-123", "FOUND"}

	expectedMalwareInfo := &common.DetectedMalware{
		MalwareName: "Generic-123",
		MalwareType: "TROJAN",
		Path:        "/path/to/malware.exe",
	}

	malwareInfo := extractMalwareInfo(words)

	if !reflect.DeepEqual(malwareInfo, expectedMalwareInfo) {
		t.Errorf("Expected %v, but got %v", expectedMalwareInfo, malwareInfo)
	}
}

func Test_parseScanSummary(t *testing.T) {
	clamSummary := `
		/path/to/file.txt: OK
		/path/to/malware.exe: Win.Trojan.Generic-1 TROJAN FOUND
		/path/to/another/file.pdf: OK
		
		----------- SCAN SUMMARY -----------
		Known viruses: 123456
		Engine version: 0.103.4
		Scanned directories: 3
		Scanned files: 10
		Infected files: 1
		Data scanned: 1.00 MB
		Data read: 0.50 MB (ratio 2.00:1)
		Time: 0.020 sec (0 m 0 s)
	`

	expectedSummary := &common.ScanSummary{
		KnownViruses:       123456,
		EngineVersion:      "0.103.4",
		ScannedDirectories: 3,
		ScannedFiles:       10,
		InfectedFiles:      1,
		DataScanned:        "1.00 MB",
		DataRead:           "0.50 MB (ratio 2.00:1)",
		TimeTaken:          "0.020 sec (0 m 0 s)",
	}

	summary := parseScanSummary(clamSummary)

	if !reflect.DeepEqual(summary, expectedSummary) {
		t.Errorf("Expected %v, but got %v", expectedSummary, summary)
	}
}

func Test_ExtractMalwareInfo_EmptySlice(t *testing.T) {
	words := []string{}

	malwareInfo := extractMalwareInfo(words)

	if malwareInfo != nil {
		t.Errorf("Expected %v, but got %v", nil, malwareInfo)
	}
}

func Test_ParseMalwareScanOutput_EmptyString(t *testing.T) {
	clamOutput := ""

	expectedMalwareList := []common.DetectedMalware{}
	expectedScanSummary := &common.ScanSummary{}

	malwareList, summary := ParseMalwareScanOutput(clamOutput)

	if !reflect.DeepEqual(malwareList, expectedMalwareList) {
		t.Errorf("Expected %v, but got %v", expectedMalwareList, malwareList)
	}

	if !reflect.DeepEqual(summary, expectedScanSummary) {
		t.Errorf("Expected %v, but got %v", expectedScanSummary, summary)
	}
}

func Test_parseScanSummary_EmptyString(t *testing.T) {
	clamSummary := ""

	expectedSummary := &common.ScanSummary{}

	summary := parseScanSummary(clamSummary)

	if !reflect.DeepEqual(summary, expectedSummary) {
		t.Errorf("Expected %v, but got %v", expectedSummary, summary)
	}
}
