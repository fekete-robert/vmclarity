package util

// Copyright Â© 2022 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import (
	"reflect"
	"testing"

	"github.com/openclarity/vmclarity/api/models"
	sharedutils "github.com/openclarity/vmclarity/shared/pkg/utils"
)

func TestParseMalwareScanOutput(t *testing.T) {
	clamOutput := "some non-malicious output\n" +
		"/path/to/malware.exe Win.Trojan.Generic-123 FOUND\n" +
		"/path/to/other/malware.py Lin.Worm.lovely_worm FOUND\n" +
		"/path/to/other/malware.py FOUND Lin.Worm.lovely_worm\n" +
		"another non-malicious output\n"

	expectedMalwareList := []models.Malware{
		{
			MalwareInfo: &models.MalwareInfo{
				MalwareName: sharedutils.StringPtr("Generic-123"),
				MalwareType: sharedutils.PointerTo[models.MalwareType]("TROJAN"),
				Path:        sharedutils.StringPtr("/path/to/malware.exe"),
			},
		},
		{
			MalwareInfo: &models.MalwareInfo{
				MalwareName: sharedutils.StringPtr("lovely_worm"),
				MalwareType: sharedutils.PointerTo[models.MalwareType]("WORM"),
				Path:        sharedutils.StringPtr("/path/to/other/malware.py"),
			},
		},
	}

	malwareList := ParseMalwareScanOutput(clamOutput)

	if len(*malwareList) != len(expectedMalwareList) {
		t.Fatalf("Expected %d malwares, but got %d", len(expectedMalwareList), len(*malwareList))
	}

	for i, expectedMalware := range expectedMalwareList {
		malware := (*malwareList)[i]
		if !reflect.DeepEqual(malware, expectedMalware) {
			t.Errorf("Malware %d: expected %v, but got %v", i, expectedMalware, malware)
		}
	}
}

func TestExtractMalwareInfo(t *testing.T) {
	words := []string{"/path/to/malware.exe:", "Win.Trojan.Generic-123", "FOUND"}

	expectedMalwareInfo := &models.MalwareInfo{
		MalwareName: sharedutils.StringPtr("Generic-123"),
		MalwareType: sharedutils.PointerTo[models.MalwareType]("TROJAN"),
		Path:        sharedutils.StringPtr("/path/to/malware.exe"),
	}

	malwareInfo := extractMalwareInfo(words)

	if !reflect.DeepEqual(malwareInfo, expectedMalwareInfo) {
		t.Errorf("Expected %v, but got %v", expectedMalwareInfo, malwareInfo)
	}
}
