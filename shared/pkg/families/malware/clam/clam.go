// Copyright Â© 2022 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package clam

import (
	"errors"
	"fmt"
	"io"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"

	"github.com/openclarity/vmclarity/shared/pkg/families/malware/clam/constants"

	"github.com/openclarity/kubeclarity/shared/pkg/job_manager"
	"github.com/openclarity/kubeclarity/shared/pkg/utils"
	log "github.com/sirupsen/logrus"

	"github.com/openclarity/vmclarity/shared/pkg/families/malware/clam/config"
	"github.com/openclarity/vmclarity/shared/pkg/families/malware/clam/util"
	"github.com/openclarity/vmclarity/shared/pkg/families/malware/common"
	sharedutils "github.com/openclarity/vmclarity/shared/pkg/utils"
)

const ScannerName = "clam"

type Scanner struct {
	name       string
	logger     *log.Entry
	config     config.Config
	resultChan chan job_manager.Result
}

func (s *Scanner) Run(sourceType utils.SourceType, userInput string) error {
	go func() {
		retResults := common.Results{
			Source:      userInput,
			ScannerName: ScannerName,
		}

		if !s.isValidInputType(sourceType) {
			retResults.Error = fmt.Errorf("received invalid input type clam scanner: %v", sourceType)
			s.sendResults(retResults, nil)
			return
		}

		// Define the ClamAV args to run
		args := []string{
			"--infected",
			"-r",
			userInput,
		}

		if err := s.importS3Signatures(); err != nil {
			// Run freshclam in case fetching S3 signatures failed
			cmd := exec.Command(s.config.FreshClamBinaryPath, args...)
			if _, err := sharedutils.RunCommand(cmd); err != nil {
				s.sendResults(retResults, fmt.Errorf("failed to run clam command: %s", err.Error()))
				return
			}
		}

		s.logger.Debugf("clamscan binary path: %s", s.config.BinaryPath)

		// Execute the ClamAV command
		// nolint:gosec
		cmd := exec.Command(s.config.BinaryPath, args...)
		out, err := sharedutils.RunCommand(cmd)
		if err != nil {
			/* If the error is that malware was found, this is not an actual error, Clam returns
			   a non 0 exit code when malware was found */
			var runError sharedutils.CmdRunError
			if !errors.As(err, &runError) || !strings.Contains(string(runError.Stdout), constants.MalwareDetectedIndication) {
				s.sendResults(retResults, fmt.Errorf("failed to run clam command: %s", err.Error()))
				return
			}

			out = runError.Stdout
		}

		detectedMalware, summary := util.ParseMalwareScanOutput(string(out))

		retResults.Malware = detectedMalware
		retResults.Summary = summary

		s.sendResults(retResults, nil)
	}()

	return nil
}

func (s *Scanner) importS3Signatures() error {
	sess, err := session.NewSession()

	if err != nil {
		return fmt.Errorf("failed to initialize AWS session: %v", err)
	}

	s3Client := s3.New(sess)

	signatureFiles := []string{
		"main.cvd",
		"daily.cvd",
		"bytecode.cvd",
	}

	for _, file := range signatureFiles {
		err := downloadFile(s3Client, s.config.SignaturesBucketName, file, s.config.ClamFolderPath)
		if err != nil {
			cmd := exec.Command(s.config.BinaryPath)
			_, err := sharedutils.RunCommand(cmd)
			if err != nil {
				return fmt.Errorf("failed to import S3 signatures")
			}
		}
	}
	return err
}

func New(c job_manager.IsConfig, logger *log.Entry, resultChan chan job_manager.Result) job_manager.Job {
	conf := c.(*common.ScannersConfig) // nolint:forcetypeassert
	return &Scanner{
		name:       ScannerName,
		logger:     logger.Dup().WithField("scanner", ScannerName),
		config:     conf.Clam,
		resultChan: resultChan,
	}
}

func (s *Scanner) isValidInputType(sourceType utils.SourceType) bool {
	switch sourceType {
	case utils.ROOTFS, utils.DIR:
		return true
	case utils.FILE, utils.IMAGE, utils.SBOM:
		fallthrough
	default:
		s.logger.Infof("source type %v is not supported for clam, skipping.", sourceType)
	}
	return false
}

func (s *Scanner) sendResults(results common.Results, err error) {
	if err != nil {
		s.logger.Error(err)
		results.Error = err
	}
	select {
	case s.resultChan <- &results:
	default:
		s.logger.Error("Failed to send results on channel")
	}
}

func downloadFile(s3Client *s3.S3, bucket, key string, clamFolderPath string) error {
	localPath := filepath.Join(clamFolderPath, key)

	out, err := os.Create(localPath)
	if err != nil {
		return fmt.Errorf("failed to create file %s: %v", localPath, err)
	}
	defer out.Close()

	resp, err := s3Client.GetObject(&s3.GetObjectInput{
		Bucket: aws.String(bucket),
		Key:    aws.String(key),
	})

	if err != nil {
		return fmt.Errorf("failed to download file %s: %v", key, err)
	}
	defer resp.Body.Close()

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return fmt.Errorf("failed to write file %s: %v", localPath, err)
	}

	return nil
}
