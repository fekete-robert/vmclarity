name: 'Build and Push Component'

on:
  workflow_call:
    inputs:
      dockerfile:
        required: true
        type: string
        description: 'Dockerfile to build and push'
      image_name:
        required: true
        type: string
        description: 'Name of the image to publish'
      image_tag:
        required: true
        type: string
        description: 'Image tag to build and push.'
      push:
        required: false
        type: boolean
        description: 'If set to true, push the image.'
        default: false
      timestamp:
        required: true
        type: string
        description: 'The build timestamp to be used for binaries.'
      inject_go_cache:
        type: boolean
        default: true
        description: 'Whether to inject Go cache from previous step into Docker build or not'

jobs:
  build-vars:
    runs-on: ubuntu-latest
    outputs:
      digests-cache-name: ${{ steps.build-vars.outputs.digests-cache-name }}
    steps:
      - name: Set build variables
        id: build-vars
        run: |
          
          ##
          ## Extract the image name
          ##
          ##    $ basename ghcr.io/openclarity/vmclarity-ui-dev
          ##    vmclarity-ui-dev
          ##
          image_name="$(basename ${{ inputs.image_name }})"
          
          ##
          ## Set digests cache name
          ##

          echo "digests-cache-name=digests-${{ github.run_id }}-${image_name}" >> "$GITHUB_OUTPUT"

  build-and-push:
    runs-on: ubuntu-latest
    needs: build-vars
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore Go cache
        if: inputs.inject_go_cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ github.ref_name }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ github.ref_name }}-
            ${{ runner.os }}-go-${{ github.event.repository.default_branch }}-

      - name: Expand cache directory paths
        if: inputs.inject_go_cache
        id: cache-dirs
        run: |
          echo "go-mod=$(realpath ~/go/pkg/mod)" >> "$GITHUB_OUTPUT"
          echo "go-build=$(realpath ~/.cache/go-build)" >> "$GITHUB_OUTPUT"

      - name: Inject Go build cache into Docker
        if: inputs.inject_go_cache
        uses: reproducible-containers/buildkit-cache-dance@v2.1.2
        with:
          cache-source: "${{ steps.cache-dirs.outputs.go-build }}"
          cache-target: /root/.cache/go-build

      - name: Inject Go dependency cache into Docker
        if: inputs.inject_go_cache
        uses: reproducible-containers/buildkit-cache-dance@v2.1.2
        with:
          cache-source: "${{ steps.cache-dirs.outputs.go-mod }}"
          cache-target: /go/pkg/mod

      - name: Cache test
        uses: docker/build-push-action@v5
        if: inputs.inject_go_cache
        with:
          context: .
          platforms: ${{ matrix.platform }}
          file: Dockerfile.cache-inject
          outputs: type=image,name=cache-inject,push-by-digest=true,name-canonical=true,push=false

      - name: Build
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          platforms: ${{ matrix.platform }}
          file: ${{ inputs.dockerfile }}
          outputs: type=image,name=${{ inputs.image_name }},push-by-digest=true,name-canonical=true,push=${{ inputs.push }}
          build-args: |
            VERSION=${{ inputs.image_tag }}
            BUILD_TIMESTAMP=${{ inputs.timestamp }}
            COMMIT_HASH=${{ github.sha }}

      - name: Export digest
        if: inputs.push
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digests
        if: inputs.push
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.build-vars.outputs.digests-cache-name }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-and-push:
    if: inputs.push
    runs-on: ubuntu-latest
    needs:
      - build-vars
      - build-and-push
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-vars.outputs.digests-cache-name }}
          path: /tmp/digests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          # shellcheck disable=SC2046
          docker buildx imagetools create \
            --tag "${{ inputs.image_name }}:${{ inputs.image_tag }}" \
            $(printf '${{ inputs.image_name }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ inputs.image_name }}:${{ inputs.image_tag }} 
